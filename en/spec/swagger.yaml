swagger: '2.0'
info:
  version: 2.0.1
  title: Vality Payments API
  description: |

    ## Description

    API is designed for the merchants who accept payments via user interface
    such as a website or a mobile app and it is the only interaction point with
    the system for goods and services payment transactions.

    ## Interaction details

    Whenever an API is accessed, its unique ID must be passed in the header
    X-Request-ID of the corresponding request:

    ```
     X-Request-ID: 37d735d4-0f42-4f05-89fa-eaa478fb5aa9
    ```

    ### Content type and coding

    The system accepts and returns data in JSON format and UTF-8 coding:

    ```
      Content-Type: application/json; charset=utf-8
    ```

    ### Date formats

    The system accepts and returns timestamp values in the format date-time,
    described in [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339):

    ```
      2017-01-01T00:00:00Z
      2017-01-01T00:00:01+00:00
    ```

    ### Maximum request processing time

    Whenever an API is accessed, the time cutoff parameters, that define
    maximum request processing time of the transaction completion, can be
    passed in the header `X-Request-Deadline` of the corresponding request:

    ```
     X-Request-Deadline: 10s
    ```
    The system stops processing the request upon the specified time. It is
    recommended to specify a value that is not more than one minute and not
    less than three seconds.

    `X-Request-Deadline` can be:

    * specified in the format `date-time` according to
    [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339);
    * specified in relative values: in milliseconds (`150000ms`), in seconds
    (`540s`) or in minutes (`3.5m`).

basePath: /v2
schemes:
  - https
consumes:
  - application/json; charset=utf-8
produces:
  - application/json; charset=utf-8
securityDefinitions:
  bearer:
    type: apiKey
    name: Authorization
    in: header
    description: |
      Interaction between the merchant and the system is performed via a secure
      protocol (HTTPS).
      HTTP requests via unencrypted channel are not supported.

      The contents of the API key should be passed in the `Authorization`
      header:

      ```
      Authorization: Bearer MjMyNDQxMjM6NDUzRmRnZDQ0M...
      ```

      Keys are not divided into test and production keys. Use the test shop ID
      for test transactions.

      **Important: Do not pass the API-key to third parties!**
security:
  - 
    bearer: [ ]
responses:
  NotFound:
    description: Target resource not found
    schema:
      $ref: '#/definitions/GeneralError'
  Unauthorized:
    description: Authorization error
  DefaultLogicError:
    description: Invalid data
    schema:
      $ref: '#/definitions/DefaultLogicError'
  ExternalIDConflict:
    description: The passed value `externalID` has already been used by you with other query parameters
    schema:
      $ref: '#/definitions/ExternalIDConflictError'
parameters:
  requestID:
    name: X-Request-ID
    in: header
    description: Unique identifier of the request to the system
    required: true
    type: string
    maxLength: 32
    minLength: 1
  shopID:
    name: shopID
    in: path
    description: Shop ID
    required: true
    type: string
    maxLength: 40
    minLength: 1
  invoiceTemplateID:
    name: invoiceTemplateID
    in: path
    description: Invoice template ID
    required: true
    type: string
    maxLength: 40
    minLength: 1
  paymentID:
    name: paymentID
    in: path
    description: Invoice payment identifier
    required: true
    type: string
    maxLength: 40
    minLength: 1
  refundID:
    name: refundID
    in: path
    description: Refund identifier within the payment
    required: true
    type: string
    maxLength: 40
    minLength: 1
  chargebackID:
    name: chargebackID
    in: path
    description: Chargeback identifier within the payment
    required: true
    type: string
    maxLength: 40
    minLength: 1
  contractID:
    name: contractID
    in: path
    description: Contract ID
    required: true
    type: string
    maxLength: 40
    minLength: 1
  residence:
    name: residence
    in: query
    description: >-
      Residence, alpha-3 code according to standard
      [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1)
    required: false
    type: string
    pattern: '^[A-Z]{3}$'
  customerID:
    name: customerID
    in: path
    description: Customer ID
    required: true
    type: string
    maxLength: 40
    minLength: 1
  customerBindingID:
    name: customerBindingID
    in: path
    description: Customer binding identifier
    required: true
    type: string
    maxLength: 40
    minLength: 1
  webhookID:
    name: webhookID
    in: path
    description: Webhook identifier
    required: true
    type: string
    maxLength: 40
    minLength: 1
  adjustmentID:
    name: adjustmentID
    in: path
    description: Contract adjustment identifier
    required: true
    type: string
    maxLength: 40
    minLength: 1
  payoutToolID:
    name: payoutToolID
    in: path
    description: Payout tool ID
    required: true
    type: string
    maxLength: 40
    minLength: 1
  payoutID:
    name: payoutID
    in: path
    description: Withdrawal ID
    required: true
    type: string
    maxLength: 40
    minLength: 1
  invoiceID:
    name: invoiceID
    in: path
    description: Invoice ID
    required: true
    type: string
    maxLength: 40
    minLength: 1
  paymentInstitutionID:
    name: paymentInstitutionID
    in: path
    description: Payment institution reference
    required: true
    type: integer
    format: int32
  serviceProviderID:
    name: serviceProviderID
    in: path
    description: Service provider identifier
    required: true
    type: string
    maxLength: 100
    minLength: 1
  fromTime:
    name: fromTime
    in: query
    description: Start of the time period
    required: true
    type: string
    format: date-time
  toTime:
    name: toTime
    in: query
    description: End of the time period
    required: true
    type: string
    format: date-time
  limit:
    name: limit
    in: query
    description: Selection limit
    required: true
    type: integer
    format: int32
    minimum: 1
    maximum: 1000
  offset:
    name: offset
    in: query
    description: Query offset
    required: false
    type: integer
    minimum: 0
  deadline:
    name: X-Request-Deadline
    in: header
    description: Maximum request processing time
    required: false
    type: string
    maxLength: 40
    minLength: 1
  partyID:
    name: partyID
    in: path
    description: The participant's unique identifier within the system. #TODO: rephrase
    required: true
    type: string
  countryID:
    name: countryID
    in: path
    required: true
    description: ' Alpha-3 country code by standard [ISO 3166-1] (https://en.wikipedia.org/wiki/ISO_3166-1)'
    type: string
    pattern: '^[A-Z]{3}$'
  tradeBlocID:
    name: tradeBlocID
    in: path
    description: Trade bloc identifier
    required: true
    type: string
tags:
  - 
    name: Parties
    x-displayName: Parties
    description: >
      A system party is a data set about your company, structure and
      conditions of concluded contracts, and also the information about the
      shops associated with the company.
  - 
    name: Shops
    x-displayName: Shops
    description: >
      A shop is a display of your website or a point of sales in the system.
      Financial terms, that determine, particularly, the system fee percentage,
      are linked to the shop. Each shop has its linked accounts that accumulate
      money sent by payers. Only one account can be in each currency. The shop
      category is determined by the group of offered goods and services. A
      banking terminal can be linked to a shop on the side of an acquiring
      bank. Any changes of these shops require system verification.

      Shops created in the test category are used for test payment. The system
      creates a test shop automatically during the participant registration.

      Your website or point of sales may have more than one shop. The closest
      analogue can be POS-terminals at a point of sales.

      ## Asynchronous notifications

      It is possible to specify a URL for any shop to receive asynchronous
      notifications about data status change by setting up webhook. For
      example, you can set up webhook by specifying URL of your application to
      which the system will send data about invoice changes. The corresponding
      public key, created during the webhook setup, is used to verify integrity
      of data sent to your application URL. You can receive this key in your
      account.

  - 
    name: Invoices
    x-displayName: Invoices
    description: |
      An invoice is a fundamental model for work with payment acceptance
      system. It is necessary to create an invoice and find out its ID before
      rendering the payment form launching debit transactions, holding funds on
      the payer’s card and launching other similar business processes.

      In general, an invoice is a container for payments, data about goods and
      a shop. Invoices have customizable limited lifetime. Once lifetime is
      expired, invoice status is impossible to change.


      ## Invoice statuses

      ### Table of invoice statuses:

      | Status     | Indication  |  Description                                                                                                  |
      | --         | --          | --                                                                                                            |
      | Unpaid     | `unpaid`    | An invoice has been created but financial obligations are not fulfilled.                                      |
      | Cancelled  | `cancelled` | An invoice is cancelled with reason, all obligations under it are null and void.                              |
      | Paid       | `paid`      | Financial obligations under an invoice are paid but goods or services has not been provided yet to the payer. |
      | Fulfilled  | `fulfilled` | All obligations, both payer’s and merchant’s ones, are fulfilled.                                             |

      Invoice statuses are indicated in the diagram nodes, narrows are marked
      by the processes. Successful completion of processes generates change
      from one status to another.

      ![Invoice State diagram](wsd/img/invoice.svg)

      ## Invoice and payment metadata

      The system provides you a possibility to fill and save any necessary
      metadata both in invoice and payment pattern. Data is described by the
      JSON array. Later the system will provide this data to you when you
      request invoice or payment data by its ID or it will send it to webhook
      in asynchronous mode that is set up for the relevant shop if there is one.

      ## Invoice events

      Any data status changes generate events. You can receive a full list of
      events that led to the specific data status or the latest event that
      describes the current data status. For example, you can request all
      events or the latest one within the specified invoice ID to find out an
      invoice status so that to make a decision about the shipment of goods or
      providing services to the payer.

      ## Authorization

      Operations:

      * invoice creation,

      * invoice cancellation,

      * invoice fulfillment,

      * getting a *new* invoice access token (after invoice creation)


      are authorised with your API key.

      ### Invoice access token

      The invoice access token authorises a limited amount of transactions
      needed to make [payments](#tag/Payments) by the specified invoice, in
      particular:

      * [tokenization](#tag/Tokens) of payment instrument,

      * payment creation by this and only this invoice,

      * getting the invoice status.


      The token is valid for 3 days from the creation. After this it will be
      impossible to use it to authorise transactions.

      ## Money distribution data

      You can specify the distribution of funds among several shops within one
      invoice. If necessary, you can add a fee that will be charged to the shop
      specified during the invoice creation (hereinafter invoice shop). Total
      amount of all distribution transactions shouldn’t exceed the invoice
      amount. There shouldn’t be more than one transaction per one shop in the
      distribution. The distribution transactions can be:

      * With AllocationBodyAmount body which transmits the amount to be
      transferred to the shop. You must create a transaction in favour of an
      invoice shop to add a fee.

      * With AllocationBodyTotal body which transmits the total amount of transactions and its fee that can be:
        * AllocationFeeFixed or fee amount in favour of an invoice shop.
        * AllocationFeeShare or some percent of the total amount of transaction in favour of an invoice shop.

  - 
    name: InvoiceTemplates
    x-displayName: Invoice templates
    description: >
      Invoice templates make invoicing easy. An invoice template is linked to
      the shop and contains specification that can be used for invoice creation
      by specifying the cost of goods and services and/or invoice metadata. If
      a template contains the fixed cost, it can be removed during invoice
      creation. If invoice metadata is not specified when an invoice is created
      by a template, they will be taken from a template (if metadata is
      contained in a template).


      The creation, update and deletion of an invoice template doesn’t require
      the system verification and requests for these changes.

      ## Authorization

      The creation, update and deletion of an invoice template is authorised by
      your API key.

      ### Invoice template access token

      An invoice template access token is created in the result of template
      creation transaction. It authorises:

      * the getting of invoice template by its ID,

      * invoice creation by the template.

  - 
    name: Payments
    x-displayName: Payments
    description: >
      Реальное списание денег с плательщиков осуществляется вызовом метода создания платежа. Перед запуском платежей необходимо создать инвойс, в рамках которого система будет проводить попытки списания, а также указать токен платежного средства плательщика. Таким образом, система предоставляет вам интерфейс, позволяющий со стороны вашего серверного кода инициировать и контролировать процесс списания денег. Данный процесс может быть, как синхронным, когда вы ожидаете ответа системы, так и асинхронным, когда после запуска платежа вы ожидаете уведомлений на установленный для соответствующего магазина webhook.
      ## Варианты проведения оплаты
      Система предоставляет два метода выполнения операции оплаты: одно- и двухстадийный, PaymentFlowInstant и PaymentFlowHold.
      Одностадийная оплата (PaymentFlowInstant) выполняется вызовом одного метода API, по результатам которого проходит авторизация и последующее списание средств в пользу магазина в рамках одной транзакции.
      Двухстадийная оплата (PaymentFlowHold) подразумевает вызов двух методов: отдельно на авторизацию, отдельно на списание. После успешной авторизации сумма операции будет блокирована на счету плательщика, то есть он не сможет ей воспользоваться.
      Подтвердить списание (capturePayment) можно на равную или меньшую сумму авторизации. В случае указания меньшей суммы остаток средств будет автоматически возвращен плательщику. Подтвердить или отменить успешную авторизацию можно как вручную, вызвав соответствующий метод API (capturePayment или cancelPayment), так и автоматически, согласно выбранной стратегии onHoldExpiration. Срок ручного подтверждения устанавливается нами в настройках системы и, как правило, составляет от 3 до 7 календарных дней.
      ## Платежная сессия
      Система обеспечивает идемпотентность списания денег с платежного средства, предоставляя уникальный идентификатор платежной сессии. Данный идентификатор предоставляется в процессе создания [токена платежного средства](#tag/Tokens) и гарантирует идемпотентность запросов на списание средств, обеспечивая защиту от ошибочных повторных списаний.
      ## Ограничение времени обработки платежа
      При создании платежа в рамках системы, в поле `processingDeadline` можно задать время выполнения платежа, по истечении которого, система попытается прекратить обработку платежа и перевести его в статус `failed` с ошибкой `processing_deadline_reached`.

      Ограничение на время обработки следует рассматривать как рекомендацию, поскольку в зависимости от платежного средства и текущего состояния платежа у системы может не быть возможности прекратить обработку. Если значение поля не установлено, то система выберет его самостоятельно, так чтобы было достаточно времени для прохождения платежа в обычных условиях.

      Ограничение времени обработки платежа, аналогично заголовку `X-Request-Deadline`, может указываться в формате, описанном в RFC 3339, или в относительных величинах.
      ## Authorization
      Запросы API платежей авторизуются либо токеном доступа к инвойсу, по которому создан платеж, либо вашим API-ключом.
  - 
    name: Tokens
    x-displayName: Payment tokens
    description: >
      Система предоставляет вам возможность самостоятельно инициировать списание денег с платежных карт плательщиков и берет на себя процессы сертификации и соответствия стандартам PCS-DSS. Стандарт декларирует запрет на обработку и хранение данных держателей карт (ДДК) на стороне мерчанта. Используемые нами подходы к реализации интерфейса подразумевают возможность верстки и отдачи HTML формы для ввода ДДК на стороне вашего серверного кода. Чтобы обеспечить соответствие стандартам мы предоставляем разработанную нами JS-библиотеку, которая после встраивания в HTML-код вашей платежной формы в асинхронном режиме собирает ДДК и отправляет на интерфейс системы для дальнейшего шифрования и токенизации. В ответ JS-библиотека возвращает на вашу платежную форму уникальный токен платежной карты, который в дальнейшем вы можете использовать для запуска платежей.

      В процессе создания токена предоставляется [платежная сессия](#tag/Payments), обеспечивающая идемпотентность списания денег с платежного средства.
  - 
    name: Categories
    x-displayName: Shop categories
    description: >
      Для описания групп товаров и услуг, предоставляемых магазинами, используются категории. Категории могут влиять на предоставление статистики, упорядочивание магазинов, а также на финансовые условия системы.
  - 
    name: Contracts
    x-displayName: Contracts
    description: >
      Договор содержит данные юридического соглашения, на основе которого система предоставляет всевозможные услуги мерчанту. В договоре, в частности описывается набор условий, по которым предоставляются сервисы системы, например, комиссии на проведение транзакций, условия вывода средств и данных юридического лица.
      Любые изменения данных магазинов требуют верификации на стороне системы путем создания заявок на изменение.
  - 
    name: Payouts
    x-displayName: Withdrawal of funds
    description: >
      Для получения автоматических выплат по принятым платежам на ваш банковский счет необходимо в рамках договора с системой указать данные для вывода средств. В дальнейшем по указанным данным система будет инициировать банковские переводы на основе суммы платежей, принятой по всем активным магазинам.
      Любые изменения данных требуют верификации на стороне системы путем создания заявок на изменение.
  - 
    name: Webhooks
    x-displayName: Webhooks
    description: >
      В данном разделе описаны методы, позволяющие управлять Webhook'ами, или инструментами для получения асинхронных оповещений посредством HTTP-запросов при наступлении одного или группы интересующих вас событий, например, о том, что платеж в рамках созданного инвойса был успешно оплачен.
      Внимание! Только Webhooks Management API является частью данной спецификации. Для реализации обработчика присылаемых уведомлений вам необходимо будет ознакомиться со спецификацей [Vality Webhooks Events API](https://github.com/valitydev/swag-payments-webhook-events).
  - 
    name: Search
    x-displayName: Search
    description: >
      Для получения списка всех инвойсов/платежей указанного магазина необходимо вызвать соответствующий метод платформы. Имеется возможность отфильтровать выборку по определенным статусам.
  - 
    name: PaymentInstitutions
    x-displayName: Payment Institutions
    description: >
      Платёжная организация - организация, осуществляющая услуги по обслуживанию финансовых операций, которые возникают в результате осуществления бизнес-процессов системой.
  - 
    name: Error Codes
    x-displayName: Error codes
    description: >

      ## Ошибки бизнес-логики
      Все ошибки бизнес-логики имеют следуюший вид:
      ```json { "code": "string", "message": "string" } ```
      В поле `code` содержится тип ошибки, а в `message` - дополнительная информация по произошедшей ошибке.
      На данный момент существуют следующие коды ошибок:
      | Код                              | Описание                                                                                                                              | | ---                              | --------                                                                                                                              | | **operationNotPermitted**        | Недоступная в рамках действующего договора операция.                                                                                  | | **invalidPartyStatus**           | Ваш участник заблокирован или его операции приостановлены. В последнем случае вы можете их [возобновить](#operation/activateMyParty). | | **invalidShopStatus**            | Ваш магазин заблокирован или его операции приостановлены. В последнем случае вы можете их [возобновить](#operation/activateShop).     | | **invalidContractStatus**        | Ваш договор более не имеет силы, по причине истечения срока действия или расторжения.                                                 | | **invalidShopID**                | Магазин с указанным идентификатором не существует или недоступен.                                                                     | | **invalidInvoiceCost**           | Стоимость инвойса не указана или неверна, в частности, не равна стоимости позиций в корзине.                                          | | **invalidInvoiceCart**           | Некорректная корзина в инвойсе, Например, пустая.                                                                                     | | **invalidInvoiceStatus**         | Неверный [статус инвойса](#tag/Invoices). Например, при попытке [оплатить](#operation/createPayment) отменённый инвойс.               | | **invoiceTermsViolated**         | Инвойс нарушает ограничения, установленные в рамках действующего договора.                                                            | | **invoicePaymentPending**        | Последний запущенный платёж по указанному инвойсу ещё не достиг финального статуса.                                                   | | **invalidPaymentStatus**         | Неверный [статус платежа](#tag/Payments). Например, при попытке [подтвердить](#operation/capturePayment) неуспешный платёж.           | | **invalidPaymentResource**       | Не поддерживаемый системой или не подключенный в рамках действующего договора платежный инструмент.                                   | | **invalidPaymentToolToken**      | Неверное содержимое токена платёжного инструмента.                                                                                    | | **invalidProcessingDeadline**    | Неверный формат ограничения времени авторизации платежа.                                                                              | | **invalidPaymentSession**        | Невернoе содержимое платёжной сессии.                                                                                                 | | **invalidRecurrentParent**       | Невернo указан родительский рекуррентный платеж.                                                                                      | | **insufficentAccountBalance**    | Недостаточный объём денежных средств на счёте магазина, например, для проведения возврата.                                            | | **invoicePaymentAmountExceeded** | Попытка возврата сверх суммы платежа.                                                                                                 | | **inconsistentRefundCurrency**   | Попытка возврата средств в валюте, отличной от валюты платежа.                                                                        | | **changesetConflict**            | Попытка внести изменения участника, конфликтующие с изменениями в других заявках, ожидающих рассмотрения.                             | | **invalidChangeset**             | Неверные изменения участника, например, попытка создать магазин в валюте, недоступной в рамках договора.                              | | **limitExceeded**                | Превышен разумный лимит выборки. В этом случае лучше запросить менее объёмный набор данных.                                           | | **invalidDeadline**              | Неверный формат времени.                                                                                                              | | **chargebackInProgress**         | Попытка возврата при открытом возвратном платеже.                                                                                     | | **invalidRequest**               | Прочие неверные данные запроса.                                                                                                       | | **invalidPartyID**               | Участник с указанным идентификатором не существует или недоступен.                                                                    | | **ambiguousPartyID**             | Невозможно однозначно определить идентификатор участника, укажите идентификатор в запросе явно.                                       | | **invalidAllocation**            | Некорректное распределение денежных средств, Например, больше одной транзакции в пользу одного из магазинов.                          | | **allocationNotPermitted**       | Распределение недоступно в рамках договора.                                                                                           | | **refundCartConflict**           | Невозможно однозначно определить содержание возврата, так как одновременно переданы распределение и корзина рефанда.                  |
      ## Общие ошибки
      Ошибки возникающие при попытках совершения операций с незарегистрированными в системе объектами. Имеют вид
      ```json { "message": "string" } ```
      В поле `message` содержится информация по произошедшей ошибке. Например:
      ```json { "message": "Invoice not found" } ```
      ## Ошибки обработки запросов
      В процессе обработки запросов силами нашей системы могут происходить различные непредвиденные ситуации. Об их появлении система сигнализирует по протоколу HTTP соответствующими [статусами][5xx], обозначающими ошибки сервера.
      |  Код    |  Описание  | | ------- | ---------- | | **500** | В процессе обработки системой запроса возникла непредвиденная ситуация. При получении подобного кода ответа мы рекомендуем обратиться в техническую поддержку. | | **503** | Система временно недоступна и не готова обслуживать данный запрос. Запрос гарантированно не выполнен, при получении подобного кода ответа попробуйте выполнить его позднее, когда доступность системы будет восстановлена. | | **504** | Система превысила допустимое время обработки запроса, результат запроса не определён. Попробуйте отправить запрос повторно или выяснить результат выполнения исходного запроса, если повторное исполнение запроса нежелательно. |
      [5xx]: https://tools.ietf.org/html/rfc7231#section-6.6

      ## Ошибки платежа
      Ошибки, передаваемые в платежную форму (отображаются плательщикам):
      | Код                    | Описание                                                                                                                                      | | ---                    | --------                                                                                                                                      | | InvalidPaymentTool     | Неверный платежный инструмент (введен номер несуществующей карты, отсутствующего аккаунта и т.п.)                                             | | AccountLimitsExceeded  | Превышены лимиты (например, в личном кабинете плательщика установлено ограничение по сумме платежа, стране списания)                          | | InsufficientFunds      | Недостаточно средств на счете                                                                                                                 | | PreauthorizationFailed | Предварительная авторизация отклонена (введен неверный код 3D-Secure, на форме 3D-Secure нажата ссылка отмены)                                | | RejectedByIssuer       | Платёж отклонён эмитентом (установлены запреты по стране списания, запрет на покупки в интернете, платеж отклонен антифродом эмитента и т.п.) | | PaymentRejected        | платёж отклонён по иным причинам                                                                                                              |
      Ошибки, передаваемые в ЛК мерчанта (отображаются только вам):
      - timeout
      Истекло время ожидания попытки оплаты
      - rejected_by_inspector
      Отклонено сервисом противодействия мошенничеству
      - preauthorization_failed
      Ошибка предавторизации (3DS)
      - authorization_failed:
      Ошибка авторизации платежа у провайдера
      - unknown
      Неизвестная ошибка авторизации
      - merchant_blocked
      Мерчант заблокирован
      - operation_blocked
      Операция платежа заблокирована
      - account_not_found
      Аккаунт не найден
      - account_blocked
      Аккаунт заблокирован
      - account_stolen
      Аккаунт украден
      - insufficient_funds
      Не хватает средств
      - processing_deadline_reached
      Истекло время выполнения платежа (см. [Ограничение времени обработки платежа](#section/Ogranichenie-vremeni-obrabotki-platezha))
      - account_limit_exceeded:
      Превышен лимит на счете плательщика
      - unknown
      Объект лимита неизвестен
      - amount
      Лимит на сумму
      - number
      Лимит на количество попыток
      - provider_limit_exceeded:
      Превышен лимит на данного мерчанта или на систему в целом у провайдера
      - unknown
      Объект лимита неизвестен
      - amount
      Лимит на сумму
      - number
      Лимит на количество попыток
      - payment_tool_rejected:
      Платёжный интрумент отклонён
      - unknown
      Неизвестный платёжный интрумент
      - bank_card_rejected:
      Банковская карта отклонена
      - unknown
      Причина неизвестна
      - card_number_invalid
      Неверный номер карты
      - card_expired
      Истёк срок действия карты
      - card_holder_invalid
      Неверный владелец карты
      - cvv_invalid
      Неверный CVV код
      - issuer_not_found
      Эмитент не найден
      - security_policy_violated
      Нарушения политики безопасности
      - temporarily_unavailable
      Временная недоступность третьих сторон
      - rejected_by_issuer
      Отклонено эмитентом

      Например, в случае некорректного CVV:
      ```
      { "code": "authorization_failed", "subError": { "code": "payment_tool_rejected", "subError": { "code": "bank_card_rejected", "subError": { "code": "cvv_invalid" } } } }
      ```
      Если вы получили ошибку, которой нет в данном описании, обратитесь в техническую поддержку.
